# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Path {
  strokeWidth: Float!
  strokeColor: String
  fillColor: String
  strokeJoin: String
  strokeCap: String
  blendMode: String
}

type Point {
  x: Float!
  y: Float!
}

type Segment {
  point: Point!
}

type PublishedDrawingData {
  action: DrawingDataMutationType!
  node: PublishedDrawingDataNode!
}

enum DrawingDataMutationType {
  PENCIL_DRAWING
  BRUSH_DRAWING
  ERASE_DRAWING
}

union PublishedDrawingDataNode = PencilDrawing | BrushDrawing | EraseDrawing

type PencilDrawing {
  layerID: ID!
  groupID: ID
  itemID: ID!
  path: Path!
  segment: Segment!
}

type BrushDrawing {
  layerID: ID!
  groupID: ID
  itemID: ID!
  path: Path!
  segments: [Segment!]!
}

type EraseDrawing {
  layerID: ID!
  itemID: ID!
  path: Path!
  segment: Segment!
}

type Item {
  id: ID!
  data: String!
}

type Drawing {
  id: ID!
  items: [Item!]!
}

type ItemMutation {
  mutation: MutationType!
  node: Item!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

input PathInput {
  strokeWidth: Float!
  strokeColor: String
  fillColor: String
  strokeJoin: String = "round"
  strokeCap: String = "round"
  blendMode: String = "normal"
}

input PointInput {
  x: Float!
  y: Float!
}

input SegmentInput {
  point: PointInput!
}

type Query {
  drawings: [Drawing!]!
  drawing(userID: ID!, id: ID!): Drawing!
  isOnline: Boolean!
}

type Mutation {
  publishPencilDrawing(pencilDrawingData: PencilDrawingInput!): Boolean!
  publishBrushDrawing(brushDrawingData: BrushDrawingInput!): Boolean!
  publishEraseDrawing(eraseDrawingData: EraseDrawingInput!): Boolean!
  createDrawing(createDrawingData: CreateDrawingInput!): Drawing!
  createOrFindDrawing(createDrawingData: CreateDrawingInput!): Drawing!
  createItem(createItemData: CreateItemInput!): Item!
  updateItem(updateItemData: UpdateItemInput!): Item!
  deleteItem(userID: ID!, drawingID: ID!, itemID: ID!): Item!
}

input PencilDrawingInput {
  userID: ID!
  drawingID: ID!
  layerID: ID!
  groupID: ID
  itemID: ID!
  path: PathInput!
  segment: SegmentInput!
}

input BrushDrawingInput {
  userID: ID!
  drawingID: ID!
  layerID: ID!
  groupID: ID
  itemID: ID!
  path: PathInput!
  segments: SegmentInput!
}

input EraseDrawingInput {
  userID: ID!
  drawingID: ID!
  layerID: ID!
  itemID: ID!
  path: PathInput!
  segment: SegmentInput!
}

input CreateDrawingInput {
  userID: ID!
  id: ID!
}

input CreateItemInput {
  userID: ID!
  drawingID: ID!
  id: ID!
  data: String!
}

input UpdateItemInput {
  userID: ID!
  drawingID: ID!
  id: ID!
  data: String!
}

type Subscription {
  drawingDataPublished(userID: ID!, drawingID: ID!): PublishedDrawingData!
  itemMutated(userID: ID!, drawingID: ID!): ItemMutation!
}
