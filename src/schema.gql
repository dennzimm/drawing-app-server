# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Item {
  id: ID!
  data: String!
}

type Drawing {
  id: ID!
  items: [Item!]!
}

type SegmentData {
  x: Float!
  y: Float!
}

type Segment {
  itemID: ID!
  segmentData: SegmentData!
  strokeColor: String
  fillColor: String
  strokeWidth: Float
}

type ItemMutationPayload {
  mutation: MutationType!
  node: Item!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

input SegmentDataInput {
  x: Float!
  y: Float!
}

input NewSegmentInput {
  userID: ID!
  drawingID: ID!
  itemID: ID!
  segmentData: SegmentDataInput!
  strokeColor: String
  fillColor: String
  strokeWidth: Float
}

type Query {
  drawings: [Drawing!]!
  drawing(userID: ID!, id: ID!): Drawing!
  isOnline: Boolean!
}

type Mutation {
  createDrawing(createDrawingData: CreateDrawingInput!): Drawing!
  createItem(createItemData: CreateItemInput!): Item!
  deleteItem(userID: ID!, drawingID: ID!, itemID: ID!): Item!
  publishNewSegment(newSegmentData: NewSegmentInput!): Segment!
}

input CreateDrawingInput {
  userID: ID!
  id: ID!
}

input CreateItemInput {
  userID: ID!
  drawingID: ID!
  id: ID!
  data: String!
}

type Subscription {
  drawingDataPublished(userID: ID!, drawingID: ID!): PublishedDrawingData!
  itemMutated(userID: ID!, drawingID: ID!): ItemMutationPayload!
}

union PublishedDrawingData = NewSegmentPayload

type NewSegmentPayload {
  node: Segment!
}
