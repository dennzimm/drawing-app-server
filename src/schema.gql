# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Item {
  id: ID!
  data: String!
}

type Drawing {
  id: ID!
  items: [Item!]!
}

type Path {
  strokeWidth: Float!
  strokeColor: String
  fillColor: String
  strokeJoin: String
  strokeCap: String
}

type Point {
  x: Float!
  y: Float!
}

type Segment {
  layerID: ID
  groupID: ID
  itemID: ID!
  point: Point!
  path: Path!
}

type ItemMutation {
  mutation: MutationType!
  node: Item!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

input PathInput {
  strokeWidth: Float!
  strokeColor: String
  fillColor: String
  strokeJoin: String = "round"
  strokeCap: String = "round"
}

input PointInput {
  x: Float!
  y: Float!
}

type Query {
  drawings: [Drawing!]!
  drawing(userID: ID!, id: ID!): Drawing!
  isOnline: Boolean!
}

type Mutation {
  createDrawing(createDrawingData: CreateDrawingInput!): Drawing!
  createItem(createItemData: CreateItemInput!): Item!
  deleteItem(userID: ID!, drawingID: ID!, itemID: ID!): Item!
  addSegment(segmentData: SegmentInput!): Segment!
}

input CreateDrawingInput {
  userID: ID!
  id: ID!
}

input CreateItemInput {
  userID: ID!
  drawingID: ID!
  id: ID!
  data: String!
}

input SegmentInput {
  userID: ID!
  drawingID: ID!
  layerID: ID
  groupID: ID
  itemID: ID!
  point: PointInput!
  path: PathInput!
}

type Subscription {
  drawingDataPublished(userID: ID!, drawingID: ID!): PublishedDrawingData!
  itemMutated(userID: ID!, drawingID: ID!): ItemMutation!
}

union PublishedDrawingData = SegmentAdded

type SegmentAdded {
  mutation: PathMutationType!
  node: Segment!
}

enum PathMutationType {
  CREATED
  UPDATED
  DELETED
  SEGMENT_ADDED
}
