# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SegmentData {
  x: Float!
  y: Float!
}

type Segment {
  userID: ID!
  drawingID: ID!
  itemID: ID!
  segmentData: SegmentData!
  strokeColor: String
  fillColor: [Float!]
  strokeWidth: Int
}

type Drawing {
  drawingID: ID!
  items: [Item!]!
}

union Item = Path | Shape

type Path {
  itemID: ID!
  applyMatrix: Boolean!
  strokeColor: [Float!]
  fillColor: [Float!]
  strokeWidth: [Int!]
  segments: [[[Float!]!]!]!
}

type Shape {
  itemID: ID!
  applyMatrix: Boolean!
  strokeColor: [Float!]
  fillColor: [Float!]
  strokeWidth: [Int!]
  type: String!
  size: [Float!]!
  radius: [Float!]!
  matrix: [Float!]!
}

input SegmentDataInput {
  x: Float!
  y: Float!
}

input NewSegmentInput {
  userID: ID!
  drawingID: ID!
  itemID: ID!
  segmentData: SegmentDataInput!
  strokeColor: String
  fillColor: [Float!]
  strokeWidth: Int
}

type Query {
  drawing(userID: ID!, drawingID: ID!): Drawing!
}

type Mutation {
  createDrawing(createDrawingData: CreateDrawingInput!): Drawing!
  addItem(addItemData: AddItemInput!): Item!
  deleteItem(userID: ID!, drawingID: ID!, itemID: ID!): Item!
  publishNewSegment(newSegmentData: NewSegmentInput!): Segment!
}

input CreateDrawingInput {
  userID: ID!
  drawingID: String!
}

input AddItemInput {
  userID: ID!
  drawingID: ID!
  itemID: ID!
  itemData: String!
}

type Subscription {
  itemAdded(userID: ID!, drawingID: ID!): Item!
  itemRemoved(userID: ID!, drawingID: ID!): Item!
  itemDataPublished(userID: ID!, drawingID: ID!): PublishedItemData!
}

union PublishedItemData = Segment
